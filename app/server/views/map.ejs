<!DOCTYPE html>
<html>
<head>
  <title>Kyros View</title>
  <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1.0, width=device-width">
  
  <link href='./img/kyros.png' rel='shortcut icon' type='image/png'> 

  <!--link rel="stylesheet" href="./css/build/ol.min.css?1" />
  <link rel="stylesheet" href="./css/main.min.css?1" type="text/css">
  <link href="./css/buttons.min.css?1" rel="stylesheet">
  <link rel="stylesheet" href="./css/ol3-layerswitcher.min.css?1" type="text/css"-->
  <link rel="stylesheet" href="./css/build/kyrosview.min.css?1" type="text/css">

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
  <link rel="stylesheet" href="/bower_components/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css" />

  <script src="https://code.jquery.com/jquery-1.11.2.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
  <script type="text/javascript" src="http://openlayers.org/en/master/build/ol.js"></script>
  <script src="./js/bootstrap-treeview.js"></script>
  <script src="./js/ol3-layerswitcher.js" type="text/javascript"></script>
  <script src="./js/bootstrap3-typeahead.min.js" type="text/javascript"></script>
  <script type="text/javascript" src="/bower_components/jquery/jquery.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.9.0/moment-with-locales.js"></script>
  <script type="text/javascript" src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
  <script type="text/javascript" src="/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>
  <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.min.css" />
  <script src="https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/datejs/date.js"></script>
  <script type="text/javascript" src="http://viglino.github.io/ol3-ext/featureanimation/featureanimation.js"></script>
  <script type="text/javascript" src="http://viglino.github.io/ol3-ext/featureanimation/dropanimation.js"></script>
  <script type="text/javascript" src="http://viglino.github.io/ol3-ext/featureanimation/nullanimation.js"></script>
  <script type="text/javascript" src="http://viglino.github.io/ol3-ext/featureanimation/showanimation.js"></script>
  <script type="text/javascript" src="http://viglino.github.io/ol3-ext/featureanimation/bounceanimation.js"></script>
  <script type="text/javascript" src="http://viglino.github.io/ol3-ext/featureanimation/shakeanimation.js"></script>
  <script type="text/javascript" src="http://viglino.github.io/ol3-ext/style/shadowstyle.js"></script>
  <!--link rel="stylesheet" href="http://viglino.github.io/ol3-ext/examples/style.css" /-->
<script type="text/javascript" src="js/bootstrap-filestyle.min.js"> </script>

<style>

#attr-button-menu
{
    position:absolute;
    top: 5px;
    left: 5px; 
    z-index:100; 
    width:48px; 
    height:48px; 
    background-image: url("./img/buttons/button_menu.png");
}
#attr-graph-hist
{
    position:absolute;
    bottom: 5px;
    right: 5px; 
    z-index:100; 
    width:48px; 
    height:48px; 
    background-image: url("./img/buttons/button_graph_hist.png");
}
#attr-logo
  {
    position:absolute; 
    z-index:100; 
    top: 60px;
    left: 5px;
    width:230px; 
    height:106px; 
    background-image: url("./img/kyroslbs.png");
    background-size: 100% 100%;
    //background-size: cover;
  }

#imageDevice
{
  display: block;
  margin-left: auto;
  margin-right: auto;
  max-width: 600px;
  height: auto;
}

</style>

<script type="text/javascript">    
 var dict = {};
 var dict_date = {};
 var car = null;
 var username = null;
 var deviceId = null;
 var iconDict = {};
 var vehicleLicenseDict = {};
 var dateDict = {};
 var aliasDict = {};
 var latitudeDict = {};
 var longitudeDict = {};
 var speedDict = {};
 var headingDict = {};
 var daySpeedDict = {};
 var weekSpeedDict = {};
 var monthSpeedDict = {};
 var dayDistanceDict = {};
 var weekDistanceDict = {};
 var monthDistanceDict = {};
 var dayConsumeDict = {};
 var weekConsumeDict = {};
 var monthConsumeDict = {};
 var dayHoursDict = {};
 var weekHoursDict = {};
 var monthHoursDict = {};
 var monitorDevices = {};
 var greenFlagOverlay = null;
 var redFlagOverlay = null;
 var actualPosOverlay = null;
 var selectedDevices = [];
 var selectedDevicesStr = "";
</script>


<script>
//window.onload = function() { car=getGETcar(); username=getGETusername(); deviceId=getGETdeviceId(); loadLayer(); setInterval(reloadLayer,5000); };
 window.onload = function() { car=getGETcar(); username=getGETusername(); deviceId=<%=deviceId%>; loadLayer(); loadMonitor(); /*selectMonitor();*/}//;
 
 $(document).ready(function() {
  $.ajaxSetup({ cache: false });
  
  $(":file").filestyle('buttonText', 'Imagen');
  $(":file").filestyle('size', 'sm');

  document.getElementById('attr-graph-hist').style.display = 'none';

  var nowDate = new Date();
  var today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 0, 0, 0, 0);
  var today2 = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate(), 23, 59, 59, 59);
  $('#datetimepicker1').datetimepicker({
      locale: 'es',
      maxDate: today,
      defaultDate: today
    });
  $('#datetimepicker2').datetimepicker({
      locale: 'es',
      defaultDate: today2
    });

  var dateNow = new Date();

  $('#datetimepicker1').datetimepicker();
  $('#datetimepicker2').datetimepicker({
    useCurrent: false //Important! See issue #1075
  });
        
  $("#datetimepicker1").on("dp.change", function (e) {
    $('#datetimepicker2').data("DateTimePicker").minDate(e.date);
  });

  $('#showDevicesMapButton').click(function(){
    for(var i = 0; i < selectedDevices.length; i++) {
      if (i<selectedDevices.length-1)
        selectedDevicesStr = selectedDevicesStr + selectedDevices[i] + ','
      else
        selectedDevicesStr = selectedDevicesStr + selectedDevices[i]
    }
    //console.log(selectedDevicesStr);
    showSelectedDevices();
  });
  

  $('#okButtonCalendar').click(function(){
    var finit = document.getElementById('initDate').value; 
    var finit_date = Date.parse(finit); 
    var finit_epoch = finit_date.getTime();
    var fend = document.getElementById('endDate').value; 
    var fend_date = Date.parse(fend); 
    var fend_epoch = fend_date.getTime();

    var deviceIdHist = monitorDevices[$('#licenseHist').val()];

    document.getElementById('formGraphDeviceId').value = deviceIdHist;
    document.getElementById('formGraphInitDate').value = finit_epoch;
    document.getElementById('formGraphEndDate').value = fend_epoch;

    showTrackingHist(deviceIdHist, finit_epoch, fend_epoch);

    document.getElementById('attr-graph-hist').style.display = 'block';
  });

  if (isMobile()) {
    document.getElementById('attr-logo').style.display = 'none';
  } else {
    var width_window = $(window).width();  //getting windows width
    var height_window = $(window).height();  //getting windows height
    $("#attr-logo").css({ width: width_window*0.12279 + 'px' });
    $("#attr-logo").css({ height: (width_window*0.12279)*0.46+ 'px' });

  }

  if ('<%=msg%>'!='') {
    $('#myModalMsgLabel').text("<%=msg%>");
    $('#myModalMsgLabel').css({ "color" : 'green' });
    $('#myModalMsg').modal('show');
  }


  $('#myModalMsg').on('hidden.bs.modal', function (e) {
    var inputs = $('form input');
    var title = $('.modal-title');
    var progressBar = $('.progress-bar');
    var button = $('.modal-footer button');

    inputs.removeAttr("disabled");

    //title.text("Log in");

    progressBar.css({ "width" : "0%" });

    button.removeClass("btn-success")
        .addClass("btn-primary")
        .text("Ok")
        .removeAttr("data-dismiss");
                
  });

});

</script>

<script>

function clearMap() {
    document.getElementById('attr-graph-hist').style.display = 'none';

}

function isMobile(){
  //return true;
    return (
        (navigator.userAgent.match(/Android/i)) ||
        (navigator.userAgent.match(/webOS/i)) ||
        (navigator.userAgent.match(/iPhone/i)) ||
        (navigator.userAgent.match(/iPod/i)) ||
        (navigator.userAgent.match(/iPad/i)) ||
        (navigator.userAgent.match(/BlackBerry/))
    );
}

  function closeTooltip() {
    
    var op = 1;  // initial opacity
    var timer = setInterval(function () {
        if (op <= 0.1){
            clearInterval(timer);
            document.getElementById('tooltip').style.display = 'none';
        }
        document.getElementById('tooltip').style.opacity = op;
        document.getElementById('tooltip').style.filter = 'alpha(opacity=' + op * 100 + ")";
        op -= op * 0.5;
    }, 50);

      document.getElementById('attr-logo').style.display = 'block';    
  }

  function showTracking5(deviceId) {
    var fileJson = "/api/tracking5/device/"+deviceId;
      $.getJSON( fileJson, function( data ) {
        var lat1, lat2, lat3, lat4, lat5 = 0;
        var lon1, lon2, lon3, lon4, lon5 = 0;
        var trackingId1, trackingId2, trackingId3, trackingId4, trackingId5 = 0;
        index = 1;
        $.each( data, function( key, val ) {

          switch(index) {
            case 1:
              lat1 = val.latitude;
              lon1 = val.longitude;
              trackingId1 = val.trackingId;
              break;
            case 2:
              lat2 = val.latitude;
              lon2 = val.longitude;
              trackingId2 = val.trackingId;
              break;
            case 3:
              lat3 = val.latitude;
              lon3 = val.longitude;
              trackingId3 = val.trackingId;
              break;
            case 4:
              lat4 = val.latitude;
              lon4 = val.longitude;
              trackingId4 = val.trackingId;
              break;
            case 5:
              lat5 = val.latitude;
              lon5 = val.longitude;
              trackingId5 = val.trackingId;
              break;
            }
          index ++;
          
      }); 
      addLinesTracking5(trackingId1, lat1, lon1, trackingId2, lat2, lon2, trackingId3, lat3, lon3, trackingId4, lat4, lon4, trackingId5, lat5, lon5)

    });
  }

  function showSelectedDevices() {
    //alert("go");
    vectorLinesSource.clear();
    if (this.greenFlagOverlay!=null)
      map.removeOverlay(this.greenFlagOverlay);
    if (this.redFlagOverlay!=null)
      map.removeOverlay(this.redFlagOverlay);

    vectorTrackingHistSource.clear();
    vectorLinesHistSource.clear();

    vectorTrackingSource.clear();

    var minLon=0;
    var minLat=0;
    var maxLon=0;
    var maxLat=0;
    var initPos=true;
    var index = 0;
    var fileJson = "/api/tracking1/devices?deviceIdList="+selectedDevicesStr;
    document.getElementById('attr-loading').style.display = 'block';
      $.getJSON( fileJson, function( data ) {
        if (data.length == 0) {
          $('#myModalMsgLabel').text("<%= __('no_tracking') %>");
          $('#myModalMsgLabel').css({ "color" : 'red' });
          $('#myModalMsgLabel2').text("<%= __('check_search') %>");
          $('#myModalMsg').modal('show');
        }

        $.each( data, function( key, val ) {
            var lat = val.latitude;
            var lon = val.longitude;
            var trackingId = val._id;
            if (initPos==true) {
              minLon=lon;
              minLat=lat;
              maxLon=lon;
              maxLat=lat;
              initPos=false;
            } else {
              if (lat<minLat) 
                minLat=lat;
              if (lat>maxLat) 
                maxLat=lat;
              if (lon<minLon) 
                minLon=lon;
              if (lon>maxLon) 
                maxLon=lon;              
            }
            
          //pintar dispositivo
          processDeviceTree (val.license,val.alias,val.longitude,val.latitude,val.speed,val.heading,val.vehicle_state, val.iconReal, val.iconCover, val.iconAlarm, val.pos_date, val.deviceId);

          lon_anterior=lon;
          lat_anterior=lat;          
          index++;



        });
        document.getElementById('attr-loading').style.display = 'none';

          // centrar el mapa
          if (minLon != 0 && minLat != 0 && maxLon != 0 && maxLat != 0){
           var bottomLeft = ol.proj.transform([minLon, minLat], 'EPSG:4326', 'EPSG:3857');
           var topRight = ol.proj.transform([maxLon, maxLat], 'EPSG:4326', 'EPSG:3857');
           extent = new ol.extent.boundingExtent([bottomLeft,topRight]);
           map.getView().fit(extent, map.getSize());
          }
        if (index==1) {
          map.getView().setZoom(12)
        
        }

      });      
  }


  function showTrackingHist(deviceIdHist, finit_epoch, fend_epoch) {

    var latHist = [];
    var lonHist = [];
    var trackingIdHist = [];

    //alert("go");
    vectorLinesSource.clear();
    if (this.greenFlagOverlay!=null)
      map.removeOverlay(this.greenFlagOverlay);
    if (this.redFlagOverlay!=null)
      map.removeOverlay(this.redFlagOverlay);

    vectorTrackingHistSource.clear();
    vectorLinesHistSource.clear();
    var minLon=0;
    var minLat=0;
    var maxLon=0;
    var maxLat=0;
    var lon_anterior=0;
    var lat_anterior=0;
    var initPos=true;
    var index = 0;
    var fileJson = "/api/tracking/device/"+deviceIdHist+"?initDate="+finit_epoch+"&endDate="+fend_epoch;
    document.getElementById('attr-loading').style.display = 'block';
      $.getJSON( fileJson, function( data ) {
        if (data.length == 0) {
          $('#myModalMsgLabel').text("<%= __('no_tracking') %>");
          $('#myModalMsgLabel').css({ "color" : 'red' });
          $('#myModalMsgLabel2').text("<%= __('check_search') %>");
          $('#myModalMsg').modal('show');
        }

        $.each( data, function( key, val ) {
            var lat = val.latitude;
            var lon = val.longitude;
            var trackingId = val._id;
            if (initPos==true) {
              minLon=lon;
              minLat=lat;
              maxLon=lon;
              maxLat=lat;
              lon_anterior=lon;
              lat_anterior=lat;
              initPos=false;
            } else {
              if (lat<minLat) 
                minLat=lat;
              if (lat>maxLat) 
                maxLat=lat;
              if (lon<minLon) 
                minLon=lon;
              if (lon>maxLon) 
                maxLon=lon;              
            }
            
            trackingIdHist.push(trackingId);
            latHist.push(lat);
            lonHist.push(lon);


          if (lat_anterior!=lat || lon_anterior!=lon) {
            addTrackingHistLine(lat_anterior, lon_anterior, lat, lon);
          }
          lon_anterior=lon;
          lat_anterior=lat;          
          index++;



        });
        document.getElementById('attr-loading').style.display = 'none';

        if (index>1) {
          // Hay mas de 1 dispositivo -> centrar
          if (minLon != 0 && minLat != 0 && maxLon != 0 && maxLat != 0){
           var bottomLeft = ol.proj.transform([minLon, minLat], 'EPSG:4326', 'EPSG:3857');
           var topRight = ol.proj.transform([maxLon, maxLat], 'EPSG:4326', 'EPSG:3857');
           extent = new ol.extent.boundingExtent([bottomLeft,topRight]);
           map.getView().fit(extent, map.getSize());
          }          
        } else {
          // solo 1 dispositivo, centrar en su posicion
          var new_view = new ol.View({
            center: ol.proj.transform(maxLon, maxLat, 'EPSG:4326', 'EPSG:3857'),
            zoom: map.getView().getZoom()
          });
          map.setView(new_view);
        }

        // pintar historico
        for (i=0; i<latHist.length;i++)
        {
          //setTimeout(function() {
          if (i == 0) {
            addTrackingHistPointStart(trackingIdHist[i], latHist[i], lonHist[i]);            
          } else if (i == latHist.length -1 ) {
            addTrackingHistPointEnd(trackingIdHist[i], latHist[i], lonHist[i]);            
          } else {
            //addTrackingHistPoint(trackingId, lat, lon);    
            addFeatureAt(trackingIdHist[i], [lonHist[i],latHist[i]]);                    
          }
          //}, 100*i);
        }


      });      
  }

  function addActualPosition(lat, lon, accuracy) {
      var geo_point = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));

      var iconFeature = new ol.Feature({
        geometry: geo_point,
        id: 0,
        elementId: 'trackingPoint',
        name: "<%= __('actual_position') %>"
      });

      iconStyle = [new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.6,
         rotation: 0,
         src: './img/points/beacon_ball_green.gif'
        }))
      })];

      iconFeature.setStyle(iconStyle);
      
      vectorTrackingSource.addFeature(iconFeature); 

      // circulo animado
      var coordinate = iconFeature.getGeometry().getCoordinates();
      var elem = document.createElement('div');
      elem.setAttribute('class', 'circleOutPos');
      this.actualPosOverlay = new ol.Overlay({
                    element: elem,
                    position: coordinate,
                    positioning: 'center-center'
      });
      map.addOverlay(actualPosOverlay);

  }

  function addTrackingHistPoint(trackingId, lat, lon) {
      var geo_point = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));

      var iconFeature = new ol.Feature({
        geometry: geo_point,
        id: trackingId,
        elementId: 'trackingPoint',
        name: "<%= __('tracking_point') %>"
      });

      iconStyle = [new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.6,
         rotation: 0,
         src: './img/points/beacon_ball_blue.gif'
        }))
      })];

      iconFeature.setStyle(iconStyle);
      
      vectorTrackingHistSource.addFeature(iconFeature); 
  }

    function addTrackingHistPointStart(trackingId, lat, lon) {
      var geo_point = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));

      var iconFeature = new ol.Feature({
        geometry: geo_point,
        id: trackingId,
        elementId: 'trackingPoint',
        name: "<%= __('init_tracking_point') %>"
      });

      iconStyle = [new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         rotation: 0,
         src: './img/points/flag_green.png'
        }))
      })];

      iconFeature.setStyle(iconStyle);
      
      vectorTrackingHistSource.addFeature(iconFeature); 

      // circulo animado
      var coordinate = iconFeature.getGeometry().getCoordinates();
      var elem = document.createElement('div');
      elem.setAttribute('class', 'circleOut');
      this.greenFlagOverlay = new ol.Overlay({
                    element: elem,
                    position: coordinate,
                    positioning: 'center-center'
      });
      map.addOverlay(greenFlagOverlay);
  }

    function addTrackingHistPointEnd(trackingId, lat, lon) {
      var geo_point = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));

      var iconFeature = new ol.Feature({
        geometry: geo_point,
        id: trackingId,
        elementId: 'trackingPoint',
        name: "<%= __('end_tracking_point') %>"
      });

      iconStyle = [new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         rotation: 0,
         anchor: [0.5, 0.5],
         offset: [10, 10],
         src: './img/points/flag_red.png'
        }))
      })];

      iconFeature.setStyle(iconStyle);
      
      vectorTrackingHistSource.addFeature(iconFeature); 

      // circulo animado
      var coordinate = iconFeature.getGeometry().getCoordinates();
      var elem = document.createElement('div');
      elem.setAttribute('class', 'circleOut');
      this.redFlagOverlay = new ol.Overlay({
                    element: elem,
                    position: coordinate,
                    positioning: 'center-center'
      });
      map.addOverlay(redFlagOverlay);      
  }
  
  function addTrackingHistLine(lat1, lon1, lat2, lon2) {
      var coords = [];
      coords.push([lon1, lat1]);
      coords.push([lon2, lat2]);

      var lineString = new ol.geom.LineString(coords);
      lineString.transform('EPSG:4326', 'EPSG:3857');

      // create the feature
      var featureLine = new ol.Feature({
        geometry: lineString,
        name: "<%= __('tracking_line') %>"
      });
      vectorLinesHistSource.addFeature(featureLine);
  }

  function getPois() {
    $('#myModalMenuKyros').modal('hide');

    // comprobar nivel de zoom actual
    if (map.getView().getZoom() < 10) {
        $('#myModalMsgLabel').text("<%= __('zoom_low') %>");
        $('#myModalMsgLabel').css({ "color" : 'red' });
        $('#myModalMsgLabel2').text("<%= __('check_zoom_level') %>");
        $('#myModalMsg').modal('show');
    }
    else {
      vectorPoiSource.clear();

      var extent = map.getView().calculateExtent(map.getSize());
      extent = ol.proj.transformExtent(extent, 'EPSG:3857', 'EPSG:4326');

      var fileJson = "/api/poi/box?ullon="+extent[0]+"&ullat="+extent[1]+"&drlon="+extent[2]+"&drlat="+extent[3]+"&username=<%=user%>";

      //var fileJson = "/api/poi/box?ullon=-6.1&ullat=42.1&drlon=-5.1&drlat=41.1&username=<%=user%>"
      document.getElementById('attr-loading').style.display = 'block';
        $.getJSON( fileJson, function( data ) {
          $.each( data, function( key, val ) {
              var lat = val.location.coordinates[1];
              var lon = val.location.coordinates[0];
              var poiId = val._id;
              var poiName = val.poiName;
              var poiIcon = val.icon;

              addPoiPoint(poiId, poiName, poiIcon, lat, lon);
          });
          document.getElementById('attr-loading').style.display = 'none';
        });  
    }    
  }

  function addPoiPoint(poiId, poiName, icon, lat, lon) {
      var geo_point = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));

      var iconFeature = new ol.Feature({
        geometry: geo_point,
        id: poiId,
        elementId: 'poi',
        name: poiName
      });

      var iconStyle = [new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         rotation: 0,
         src: './images/pois/' + icon
        }))
      })];

      iconFeature.setStyle(iconStyle);
      
      vectorPoiSource.addFeature(iconFeature); 
  }

  function openCalendar() {
    $('#myModalMenuKyros').modal('hide');
    $('#myModalCalendar').modal('show');
  }

  function openMonitor() {
    $('#myModalMenuKyros').modal('hide');
    $('#myModalMonitor').modal('show');
  }

  function openMenuKyros() {
    $('#myModalMenuKyros').modal('show');
  }

  function openDefaultDevice() {
    $('#myModalMenuKyros').modal('hide');
      
      // centrar el mapa
      var new_view = new ol.View({
          center: ol.proj.transform([longitudeDict[deviceId], latitudeDict[deviceId]], 'EPSG:4326', 'EPSG:3857'),
          zoom: 14
        });

        var pan = ol.animation.pan({
          duration: 700,
          source:  (map.getView().getCenter()),
        });
        map.beforeRender(pan);
        map.setView(new_view);

    openTooltip(deviceId);
  }

  function openTooltip(deviceId) {
    document.getElementById('formDeviceId').value = deviceId;
    document.getElementById('formIcon').value = iconDict[deviceId];
    document.getElementById('formAlias').value = aliasDict[deviceId];
    document.getElementById('formVehicleLicense').value = vehicleLicenseDict[deviceId];
    document.getElementById('formLatitude').value = latitudeDict[deviceId];
    document.getElementById('formLongitude').value = longitudeDict[deviceId];
    document.getElementById('formSpeed').value = speedDict[deviceId];
    

    //document.getElementById('deviceIdImage').value = deviceId;
     $("#uploadForm").attr("action", "/api/image/upload/" + deviceId);
    
    document.getElementById('tooltipIcon').innerHTML = "<img src='./images/" + iconDict[deviceId] + "'/>";
    document.getElementById('tooltipVehicleLicense').innerHTML = vehicleLicenseDict[deviceId];

    var date = new Date(dateDict[deviceId]);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hours = pad(date.getHours());
    var minutes = pad(date.getMinutes());
    var seconds = pad(date.getSeconds());

      document.getElementById('tooltipDate').innerHTML = day + "/" + month + "/" + year + " " + hours + ":" + minutes + ":" + seconds;

    document.getElementById('tooltipAlias').innerHTML = aliasDict[deviceId];
    document.getElementById('tooltipLatitude').innerHTML = latitudeDict[deviceId];
    document.getElementById('tooltipLongitude').innerHTML = longitudeDict[deviceId];
    document.getElementById('tooltipSpeed').innerHTML = speedDict[deviceId];
    document.getElementById('tooltipHeading').innerHTML = headingDict[deviceId];

    document.getElementById('tooltipDaySpeed').innerHTML = '---';
    document.getElementById('tooltipWeekSpeed').innerHTML = '---';
    document.getElementById('tooltipMonthSpeed').innerHTML = '---';
    document.getElementById('tooltipDayDistance').innerHTML = '---';
    document.getElementById('tooltipWeekDistance').innerHTML = '---';
    document.getElementById('tooltipMonthDistance').innerHTML = '---';
    document.getElementById('tooltipDayConsume').innerHTML = '---';
    document.getElementById('tooltipWeekConsume').innerHTML = '---';
    document.getElementById('tooltipMonthConsume').innerHTML = '---';
    
var fileJson = "/api/odometer/"+deviceId;
    $.getJSON( fileJson, function( data ) {

      $.each( data, function( key, val ) {

    document.getElementById('tooltipDaySpeed').innerHTML = val.daySpeed;
    document.getElementById('tooltipWeekSpeed').innerHTML = val.weekSpeed;
    document.getElementById('tooltipMonthSpeed').innerHTML = val.monthSpeed;
    document.getElementById('tooltipDayDistance').innerHTML = val.dayDistance;
    document.getElementById('tooltipWeekDistance').innerHTML = val.weekDistance;
    document.getElementById('tooltipMonthDistance').innerHTML = val.monthDistance;
    document.getElementById('tooltipDayConsume').innerHTML = val.dayConsume;
    document.getElementById('tooltipWeekConsume').innerHTML = val.weekConsume;
    document.getElementById('tooltipMonthConsume').innerHTML = val.monthConsume;

      });

      $('#myModal').modal('show');
    });
    /*
    document.getElementById('tooltipDayHours').innerHTML = dayHoursDict[deviceId];
    document.getElementById('tooltipWeekHours').innerHTML = weekHoursDict[deviceId];
    document.getElementById('tooltipMonthHours').innerHTML = monthHoursDict[deviceId];
    */
    

    if (this.deviceId == deviceId) {
       $('#tooltipHeader').css('background-color', '#F7BE81');
       document.getElementById('selectButton').style.display = 'none';
    } else {
        $('#tooltipHeader').css('background-color', '#F2F2F2');
        document.getElementById('selectButton').style.display = 'block';
        $('#selectButtonText').text("<%= __('select_button') %>");

    }

    // Cargar la imagen del dispositivo
    var urlPostImageDevice = "/api/image/device/"+deviceId;
    $.getJSON( urlPostImageDevice, function( data ) {
      if (data!='')
        document.getElementById('imageDevice').setAttribute( 'src', 'data:image/png;base64,'+data);
      else
        document.getElementById('imageDevice').setAttribute( 'src', 'data:image/png;base64,'+'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AkeChAkHBCAqQAAACZpVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVAgb24gYSBNYWOV5F9bAAAADElEQVQI12P4//8/AAX+Av7czFnnAAAAAElFTkSuQmCC');

    });
  }

function pad(value) {
    if(value < 10) {
        return '0' + value;
    } else {
        return value;
    }
}

function openTooltipTrackingPoint(trackingId) {
    
    var fileJson = "/api/tracking/"+trackingId;
      $.getJSON( fileJson, function( data ) {
      $.each( data, function( key, val ) {

      document.getElementById('tooltipTrackingTrackingId').innerHTML = trackingId;
      var date = new Date(val.pos_date);
      var year = date.getFullYear();
      var month = date.getMonth() + 1;
      var day = date.getDate();
      var hours = pad(date.getHours());
      var minutes = pad(date.getMinutes());
      var seconds = pad(date.getSeconds());


      document.getElementById('tooltipTrackingDate').innerHTML = day + "/" + month + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
      document.getElementById('tooltipTrackingLatitude').innerHTML = val.latitude;
      document.getElementById('tooltipTrackingLongitude').innerHTML = val.longitude;
      document.getElementById('tooltipTrackingSpeed').innerHTML = val.speed;
      document.getElementById('tooltipTrackingHeading').innerHTML = val.heading;

      });

      $('#tooltipTrackingHeader').css('background-color', '#66c2ff');

      $('#myModalTooltipTrackingPoint').modal('show');
    });
  }

function openTooltipMapPoint(latitude, longitude) {
    

      document.getElementById('tooltipMapLatitude').innerHTML = latitude;
      document.getElementById('tooltipMapLongitude').innerHTML = longitude;

      //$('#tooltipTrackingHeader').css('background-color', '#66c2ff');

      $('#myModalTooltipMapPoint').modal('show');
  }

</script>

</head>
<body>
 <form id="myformLogout" action="/logout" method="POST">
 </form>

 <form id="myform" action="/map" method="POST">
  <input type="hidden" id="formDeviceId" name="deviceId" value="0" />
  <input type="hidden" id="formAlias" name="alias" value="0" />
  <input type="hidden" id="formIcon" name="icon" value="0" />
  <input type="hidden" id="formVehicleLicense" name="vehicleLicense" value="0" />
  <input type="hidden" id="formLatitude" name="latitude" value="0" />
  <input type="hidden" id="formLongitude" name="longitude" value="0" />
  <input type="hidden" id="formSpeed" name="speed" value="0" />
</form>

 <form id="myformGraphHist" action="/graphs-hist" method="POST">
  <input type="hidden" id="formGraphDeviceId" name="deviceId" value="0" />
  <input type="hidden" id="formGraphInitDate" name="initDate" value="0" />
  <input type="hidden" id="formGraphEndDate" name="endDate" value="0" />
</form>


<div class="modal fade" id="myModalMsg" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">

      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
        <h4 class="modal-title" id="myModalLabel"><%= __('message') %></h4>
      </div> <!-- /.modal-header -->

    <div class="modal-body">
      <div class="form-group">
        <h4 class="modal-title" id="myModalMsgLabel"></h4>
      </div> 
      <div class="form-group">
        <h5 class="modal-title" id="myModalMsgLabel2"></h5>
      </div> 

      <div id="okButton" class="modal-footer" data-dismiss="modal" aria-hidden="true">
        <button class="form-control btn btn-primary">Ok</button>
      </div>
    </div> <!-- /.modal-body -->

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="modal fade" id="myModalMenuKyros" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">

      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
        <h4 class="modal-title" id="myModalLabel"><%= __('main_menu') %></h4>
      </div> <!-- /.modal-header -->

    <div class="modal-body" id="grad1">
      

      
    <table border="0" bgcolor="#bfbeb5">
    <tr>
      <td align="center">
        <button type="button" class="btn btn-primary raised"><img src="./img/buttons/button_map.png"/><br>Mapa OL</button>
      </td>
      <td align="center">
        <button onclick="javascript:location.href='http://view.kyroslbs.com/graphs'" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_graph.png"/><br>Gráficos</button>
      </td>
    </tr>
    <tr><td>&nbsp;</td><td></td></tr>
    <tr>
      <td align="center">
        <button onclick="javascript:location.href='http://view.kyroslbs.com/gmap'" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_gmap.png"/><br>Mapa G.</button>
      </td>
      <td align="center">
        <button onclick="javascript:openDefaultDevice();" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_device.png"/><br>Dispos.</button>
      </td>
    </tr>
    <tr><td>&nbsp;</td><td></td></tr>
    <tr>
      <td align="center">
        <button onclick="javascript:location.href='http://view.kyroslbs.com/globe'" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_globe.png"/><br>Globo</button>
      </td>
      <td align="center">
        <button onclick="javascript:openMonitor();" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_devices.png"/><br>Todos</button>
      </td>
    </tr>
    <tr><td>&nbsp;</td><td></td></tr>
    <tr>
      <td align="center">

        <button onclick="javascript:openCalendar();" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_calendar.png"/><br>Histórico</button>
      </td>
      <td align="center">
        <button onclick="javascript:getPois();" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_pois.png"/><br>PDI</button>
      </td>
    <tr><td>&nbsp;</td><td></td></tr>
    <tr>
      <td align="center">
        <button onclick="javascript:location.href='http://view.kyroslbs.com/home'" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_conf.png"/><br>Config.</button>
      </td>
      <td align="center">
        <button onclick="$('#myformLogout').submit();" type="button" class="btn btn-primary raised"><img src="./img/buttons/button_logout.png"/><br>Salir</button>
      </td>
    </tr>
    </table>
    </div> <!-- /.modal-body -->

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->


<div class="modal fade" id="myModalMonitor" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">

      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
        <h4 class="modal-title" id="myModalLabel"><%= __('monitor_devices') %></h4>
      </div> <!-- /.modal-header -->

      <div class="modal-body" id="treeBody">

      
      
      <div class="col-sm-12" id="monitorDiv">
          <div id="treeview-checkable" class=""></div> 
        </div>     

      <div id="okButtonUpdateMonitor" class="modal-footer" data-dismiss="modal" aria-hidden="true">
        <button id="showDevicesMapButton" class="form-control btn btn-primary"><%= __('show_over_map') %></button>
      </div>
    </div> <!-- /.modal-body -->

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="modal fade" id="myModalCalendar" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">

      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
        <h4 class="modal-title" id="myModalLabel"><%= __('historic') %></h4>
      </div> <!-- /.modal-header -->

      <div class="modal-body">

      <div class="container">
          <div class="row">
              <div class='col-sm-6'>
                  <div class="form-group">
                      <h5 class="modal-title"><%= __('init_date') %>:</h5>

                      <div class='input-group date' id='datetimepicker1'>
                          <input type='text' class="form-control" id='initDate'/>
                          <span class="input-group-addon">
                              <span class="glyphicon glyphicon-calendar"></span>
                          </span>
                      </div>
                  </div>
              </div>
              
          </div>
      </div>

      <div class="container">
          <div class="row">
              <div class='col-sm-6'>
                  <div class="form-group">
                      <h5 class="modal-title"><%= __('end_date') %>:</h5>

                      <div class='input-group date' id='datetimepicker2'>
                          <input type='text' class="form-control" id='endDate'/>
                          <span class="input-group-addon">
                              <span class="glyphicon glyphicon-calendar"></span>
                          </span>
                      </div>
                  </div>
              </div>
              
          </div>
      </div>


      <div class="container">
          <div class="row">
              <div class='col-sm-2'>
                  <div class="form-group">
                      <h5 class="modal-title"><%= __('license') %>:</h5>

                      
                          <input type='text' class="form-control" id='licenseHist' data-provide="typeahead" placeholder=""/>
                          
                   
                  </div>
              </div>
              
          </div>
      </div>

      <div id="okButtonCalendar" class="modal-footer" data-dismiss="modal" aria-hidden="true">
        <button class="form-control btn btn-primary"><%= __('consult') %></button>
      </div>
    </div> <!-- /.modal-body -->

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div style="z-index: 10000;" class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">

      <div class="modal-header" id="tooltipHeader">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">X</button>
        <!--button type="button" class="close" data-dismiss="modal" aria-hidden="true"><img src="./img/close.png"/></button-->
        <!--h4 class="modal-title" id="myModalLabel">Log in</h4-->
            <table border="0">
            <tr>
              <td id="tooltipIcon"></td>
              <td><b><font color="black" id="tooltipVehicleLicense">---</font></b></td>
            </tr>
            </table>

      </div> <!-- /.modal-header -->

<!-- TABS!!
<ul class="nav nav-tabs"id="tabContent">
        <li class="active"><a href="#details" data-toggle="tab">Details</a></li>
        <li><a href="#access-security" data-toggle="tab">Access / Security</a></li>
        <li><a href="#networking" data-toggle="tab">Networking</a></li>
      </ul>
  
      <div class="tab-content">
        <div class="tab-pane active" id="details"></div>
   
      <div class="control-group">
        <label class="control-label">Instance Name</label>
        </div>
      </div>
        
      <div class="tab-content">
        <div class="tab-pane" id="access-security">
        content 0
        </div> 
      </div>

      <div class="tab-content">
        <div class="tab-pane" id="networking">
        content 1
       </div> 
      </div>
-->

      <div class="modal-body">

          <div class="form-group">
          
            <table border="0">
            <!--tr>
              <td><b>Vehicle license</b></td>
              <td><font color="black" id="tooltipVehicleLicense">---</font></td>
            </tr-->
            <tr>
              <td><b><%= __('date') %></b></td>
              <td><font color="black" id="tooltipDate">---</font></td>
            </tr>
            <tr>
              <td><b><%= __('alias') %></b></td>
              <td><font color="black" id="tooltipAlias">---</font></td>
            </tr>
            <tr>
              <td><b><%= __('coordinates') %></b></td>
              <td><font color="black" id="tooltipLatitude">---</font>, <font color="black" id="tooltipLongitude">---</font></td>
            </tr>
            <tr>
              <td><b><%= __('speed') %> (Km/h)</b></td>
              <td><font color="black" id="tooltipSpeed">---</font></td>
            </tr>
            <tr>
              <td><b><%= __('heading') %> (º)</b></td>
              <td><font color="black" id="tooltipHeading">---</font></td>
            </tr>
            <!--tr>
              <td>&nbsp;</td>
              <td>&nbsp;</td>
            </tr-->
          </table>

            
          </div> <!-- /.form-group -->

            <div class="form-group">
<div id="deviceOdometer">
          <table class="bordered">
          <thead>
          <tr>
                <th class="numeric" width="20%"><%= __('day') %></th>
                <th class="numeric" width="20%"><%= __('week') %></th>
                <th class="numeric" width="20%"><%= __('month') %></th>
                <th width="40%"></th>
          <tr>
          </thead>
            <tbody>
              <tr>
                <td id="tooltipDaySpeed">---</td>
                <td id="tooltipWeekSpeed">---</td>
                <td id="tooltipMonthSpeed">---</td>
                <td><font color="red"><%= __('average_speed') %></font> (km/h)</td>
              </tr>
              <tr>
                <td id="tooltipDayDistance">---</td>
                <td id="tooltipWeekDistance">---</td>
                <td id="tooltipMonthDistance">---</td>
                <td><font color="red"><%= __('distance') %></font> (Km)</td>
              </tr>
              <tr>
                <td id="tooltipDayConsume">---</td>
                <td id="tooltipWeekConsume">---</td>
                <td id="tooltipMonthConsume">---</td>
                <td><font color="red"><%= __('consume') %></font> (L)</td>
              </tr>
              <!--tr>
                <td id="tooltipDayHours">---</td>
                <td id="tooltipWeekHours">---</td>
                <td id="tooltipMonthHours">---</td>
                <td><font color="red">Horas</font> conducción</td>
              </tr-->
            </tbody>
          </table>
        </div>

</div>

    <img id="imageDevice" src=""/>


<form id        =  "uploadForm"
     enctype   =  "multipart/form-data"
     action    =  "/api/image/upload"
     method    =  "POST"
>

<br>

<input type="file" class="filestyle" data-placeholder="No file" name="userPhoto" data-buttonName="btn-primary">



<!--label class="btn btn-primary" for="my-file-selector">
    <input id="my-file-selector" type="file" name="userPhoto" style="display:none;" onchange="$('#upload-file-info').html($(this).val());">
    Seleccionar imagen
</label>
<br>
<span class='label label-info' id="upload-file-info"></span>
<br--!>

<!--label class="btn btn-default btn-file">
    Browse <input type="file" name="userPhoto"style="display: none;">
</label-->

<!--input type="file" name="userPhoto" /-->
<input type="submit" value="Actualizar" name="submit">
<!--input type="hidden" value="" id="deviceIdImage" name="deviceId"-->
</form>



      </div> <!-- /.modal-body -->

      <div id="selectButton" class="modal-footer" onclick="$('#myform').submit();">
        <button id="selectButtonText" class="form-control btn btn-primary"><%= __('select_button') %></button>

      </div> <!-- /.modal-footer -->

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div style="z-index: 10000;" class="modal fade" id="myModalTooltipTrackingPoint" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">

      <div class="modal-header" id="tooltipTrackingHeader">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">X</button>
            <table border="0">
            <tr>
              <td><b><%= __('id') %>: </b><font color="black" id="tooltipTrackingTrackingId">---</font></td>
            </tr>
            </table>

      </div> <!-- /.modal-header -->

      <div class="modal-body">

          <div class="form-group">
          
            <table border="0">
            <tr>
              <td><b><%= __('date') %></b></td>
              <td><font color="black" id="tooltipTrackingDate">---</font></td>
            </tr>
            <tr>
              <td><b><%= __('coordinates') %></b></td>
              <td><font color="black" id="tooltipTrackingLatitude">---</font>, <font color="black" id="tooltipTrackingLongitude">---</font></td>
            </tr>
            <tr>
              <td><b><%= __('speed') %> (Km/h)</b></td>
              <td><font color="black" id="tooltipTrackingSpeed">---</font></td>
            </tr>
            <tr>
              <td><b><%= __('heading') %> (º)</b></td>
              <td><font color="black" id="tooltipTrackingHeading">---</font></td>
            </tr>
          </table>
            
         </div> <!-- /.form-group -->

      </div> <!-- /.modal-body -->

      </div> <!-- /.modal-footer -->

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<!-- Ventana modal punto sobre el mapa -->
<div style="z-index: 10000;" class="modal fade" id="myModalTooltipMapPoint" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">

      <div class="modal-header" id="tooltipMapHeader">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">X</button>
            <table border="0">
            <tr>
              <td><b><%= __('position_map') %></td>
            </tr>
            </table>

      </div> <!-- /.modal-header -->
      <div class="modal-body">
          <div class="form-group">          
            <table border="0">
            <tr>
              <td><b><%= __('coordinates') %></b></td>
              <td><font color="black" id="tooltipMapLatitude">---</font>, <font color="black" id="tooltipMapLongitude">---</font></td>
            </tr>
          </table>
            
         </div> <!-- /.form-group -->
      </div> <!-- /.modal-body -->
      </div> <!-- /.modal-footer -->
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->



  <div class="container-fluid">
   <div class="row-fluid">
    <div class="span12">
     <div id="map" class="map">
       <div id="attr-logo"></div>
       <div id="attr-loading"></div>
       <!--div id="attr-conf" onclick="javascript:location.href=window.location.host"></div-->
       <div id="attr-button-menu" onclick="javascript:openMenuKyros();"></div>
       <div id="attr-graph-hist" onclick="$('#myformGraphHist').submit();"></div>
       <!--div id="attr-button-update" onclick="javascript:reloadLayer();"></div-->
       <div id="info"></div>



     </div>
   </div>
 </div>
</div>

<script>
  function getGET() {
    // capturamos la url
    var loc = document.location.href;
    // si existe el interrogante
    if(loc.indexOf('?')>0) {
      // cogemos la parte de la url que hay despues del interrogante
      var getString = loc.split('?')[1];
      // obtenemos un array con cada clave=valor
      var GET = getString.split('&');
      var get = {};

      // recorremos todo el array de valores
      for(var i = 0, l = GET.length; i < l; i++){
        var tmp = GET[i].split('=');
        get[tmp[0]] = unescape(decodeURI(tmp[1]));
      }
      return get;
    }
  }

  function getGETcar() {
    // capturamos la url
    var loc = document.location.href;
    // si existe el interrogante
    if(loc.indexOf('?')>0) {
      // cogemos la parte de la url que hay despues del interrogante
      var getString = loc.split('?')[1];
      // obtenemos un array con cada clave=valor
      var GET = getString.split('&');
      var get = {};

      // recorremos todo el array de valores
      for(var i = 0, l = GET.length; i < l; i++){
        var tmp = GET[i].split('=');
        get[tmp[0]] = unescape(decodeURI(tmp[1]));
        if (unescape(decodeURI(tmp[0])) == 'car')
          return unescape(decodeURI(tmp[1]));
      }
      return null;
    }
  }

  function getGETdeviceId() {
    // capturamos la url
    var loc = document.location.href;
    // si existe el interrogante
    if(loc.indexOf('?')>0) {
      // cogemos la parte de la url que hay despues del interrogante
      var getString = loc.split('?')[1];
      // obtenemos un array con cada clave=valor
      var GET = getString.split('&');
      var get = {};

      // recorremos todo el array de valores
      for(var i = 0, l = GET.length; i < l; i++){
        var tmp = GET[i].split('=');
        get[tmp[0]] = unescape(decodeURI(tmp[1]));
        if (unescape(decodeURI(tmp[0])) == 'deviceId')
          return unescape(decodeURI(tmp[1]));
      }
      return null;
    }
  }

  function getGETusername() {
    // capturamos la url
    var loc = document.location.href;
    // si existe el interrogante
    if(loc.indexOf('?')>0) {
      // cogemos la parte de la url que hay despues del interrogante
      var getString = loc.split('?')[1];
      // obtenemos un array con cada clave=valor
      var GET = getString.split('&');
      var get = {};

      // recorremos todo el array de valores
      for(var i = 0, l = GET.length; i < l; i++){
        var tmp = GET[i].split('=');
        get[tmp[0]] = unescape(decodeURI(tmp[1]));
        if (unescape(decodeURI(tmp[0])) == 'username')
          return unescape(decodeURI(tmp[1]));
      }
      return null;
    }
  }

 // *******************************
 // Sources y Layers 
 // *******************************

  var vectorPoiSource = new ol.source.Vector({
   features: []
  });
  var vectorKyrosPoiLayer = new ol.layer.Vector({
   title: 'POIs',
   visible: true,
   source: vectorPoiSource
  });

  var vectorTrackingSource = new ol.source.Vector({
   features: []
  });
  var vectorKyrosTrackingLayer = new ol.layer.Vector({
   title: 'All last position',
   visible: true,
   source: vectorTrackingSource
  });

  var vectorLinesSource = new ol.source.Vector({
   features: []
  });
  var lineStyle = new ol.style.Style({
    stroke: new ol.style.Stroke({
        //color: '#0000ff',
        color: '#66c2ff',        
        //color: '#'+Math.floor(Math.random()*16777215).toString(16),
        width: 4
    })
  });
  var vectorKyrosLinesLayer = new ol.layer.Vector({
    title: 'Last 5 positions line',
    visible: true,
    style: lineStyle,
    source: vectorLinesSource
  });

var style = 
  [ new ol.style.Style(
      { image: new ol.style.Shadow(
        { radius: 4,
        }),
        stroke: new ol.style.Stroke(
        { color: [0,0,0,0.3],
          width: 1
        }),
        fill: new ol.style.Fill(
          { color: [0,0,0,0.3]
          }),
        zIndex: -1
      }),
    new ol.style.Style(
      { 


      image: new ol.style.RegularShape(
        { radius: 5,
          radius2: 5,
          points: 12,
          fill: new ol.style.Fill({ color: '#0052cc' })
        }),
      stroke: new ol.style.Stroke(
        { color: [0,0,0],
          width: 3
        }),
      fill: new ol.style.Fill(
        { color: [0,0,255,0.3]
        })
      })
  ];
  style[1].getImage().getAnchor()[1] += 10;

var style2 = 
  [ new ol.style.Style(
      { image: new ol.style.Shadow(
        { radius: 6,
        }),
        stroke: new ol.style.Stroke(
        { color: [0,0,0,0.3],
          width: 1
        }),
        fill: new ol.style.Fill(
          { color: [0,0,0,0.3]
          }),
        zIndex: -1
      }),
    new ol.style.Style(
      { 


      image: new ol.style.RegularShape(
        { radius: 8,
          radius2: 8,
          points: 12,
          fill: new ol.style.Fill({ color: '#ff8000' })
        })
      
      })
  ];
  style2[1].getImage().getAnchor()[1] += 10;

var vectorTrackingMapPointSource = new ol.source.Vector({
   features: []
  });
  var vectorTrackingMapPointLayer = new ol.layer.Vector({
   visible: true,
    style: style2,
   source: vectorTrackingMapPointSource
  });

  var vectorTrackingHistSource = new ol.source.Vector({
   features: []
  });
  var vectorKyrosTrackingHistLayer = new ol.layer.Vector({
   title: 'Historical positions',
   visible: true,
    style: style,
   source: vectorTrackingHistSource
  });

  var vectorLinesHistSource = new ol.source.Vector({
   features: []
  });
  var lineStyleHist = new ol.style.Style({
    stroke: new ol.style.Stroke({
        //color: '#0000ff',
        color: '#66c2ff',        
        width: 3
    })
  });
  var vectorKyrosLinesHistLayer = new ol.layer.Vector({
    title: 'Historical line',
    visible: true,
    style: lineStyleHist,
    source: vectorLinesHistSource
  });
 
 /*
 vectorLinesHistSource.once('change', function(evt){
  if (vectorLinesHistSource.getState() === 'ready') {
    // now the source is fully loaded
    if (vectorLinesHistSource.getSource().getFeatures().length > 0) {
      map.getView().fitExtent(vectorLinesHistSource.getExtent(), map.getSize());

      console.info(map.getView().getCenter());
      console.info(map.getView().getZoom());
    }
  }
});
 */

  var projection = ol.proj.get('EPSG:3857');


    function getDeviceImage(vehicleState, posDate, iconReal, iconCover, iconAlarm) 
    {
      var now = new Date();
      //console.log("-->" + now.getTime());
      if (vehicleState==0)
        if (posDate < now.getTime() - 600000)  // posicion antigua: 10 minutos
          return './images/' + iconCover;
        else
          return './images/' + iconReal;
      else
        return './images/' + iconAlarm;
    }


    function followCar(car, new_car, lat, lon) {
      if (car == new_car) {

        var new_view = new ol.View({
          center: ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'),
          zoom: map.getView().getZoom()
        });

        var pan = ol.animation.pan({
          duration: 700,
          source:  (map.getView().getCenter()),
        });
        map.beforeRender(pan);
        map.setView(new_view);
      }
    }

    function moveMap(deviceId) {
        var new_view = new ol.View({
          center: ol.proj.transform([longitudeDict[deviceId], latitudeDict[deviceId]], 'EPSG:4326', 'EPSG:3857'),
          zoom: map.getView().getZoom()
        });
        /*
        var pan = ol.animation.pan({
          duration: 500,
          source:  (map.getView().getCenter()),
        });
        map.beforeRender(pan);*/
        map.setView(new_view);
    }


function loadMonitor() {
  var fileJson = "/api/monitor/<%=user%>";
  $.getJSON( fileJson, function( data ) {
    //console.log(data);
    //var treeData = data.split("name").join("text");
    jsonString = JSON.stringify(data[0].monitor)
   // console.log(jsonString);

var tree = [
  {
    text: "Parent 1",
    tags: [3],
    state: {
    checked: "true",
    disabled: false,
    expanded: true,
    selected: true
    },
    nodes: [
      {
        text: "Child 1",
        tags: [1],
        nodes: [
          {
            text: "Grandchild 1"
          },
          {
            text: "Grandchild 2"
          }
        ]
      },
      {
        text: "Child 2"
      }
    ]
  },
  {
    text: "Parent 2"
  },
  {
    text: "Parent 3",
    selectedIcon: "glyphicon glyphicon-stop",
    selectable: true,
    state: {
    checked: "false",
    disabled: false,
    expanded: true,
    selected: false
    },
    nodes: [
      {
        text: "Child 1",
        nodes: [
          {
            text: "Grandchild 1",
            tags: ['available'],
                checked: true
          },
          {
            text: "Grandchild 2"
          }
        ]
      },
      {
        text: "Child 2"
      }
    ]
  },
  {
    text: "Parent 4"
  },
  {
    text: "Parent 5"
  }
];

    jsonString = jsonString.split("name").join("text");
    jsonString = jsonString.split("childs").join("nodes");
    jsonString = jsonString.split("ndevices").join("tags");
    jsonString = jsonString.split('"false"').join('false');
    jsonString = jsonString.split('"true"').join('true');

    jsonObject = JSON.parse(jsonString);
    //console.log(jsonObject);

    $('#monitorDiv').height($(window).height()-200);

    var $checkableTree = $('#treeview-checkable').treeview({
          data: jsonObject,
          //data: tree,
          showIcon: true,
          showCheckbox: true,
          highlightSelected: false,
          showTags: true,
          onNodeChecked: function(event, node) {
            console.log(node.element_id + ' was checked');

//$('#treeview-checkable').treeview('toggleNodeChecked', [ node, { silent: true } ]);

            if (node.type == "fleet") {
              if (node.nodes !== undefined) {
                for(var i in node.nodes) {
                  var child = node.nodes[i];
                  //$('#treeview-checkable').treeview('checkNode', node.nodes[i].id);
                  $('#treeview-checkable').treeview('selectNode', [ child, { silent: false } ]);
                }
              }
            }
            else if (node.type == "device")
              selectedDevices.push(node.element_id);

            //$('#checkable-output').prepend('<p>' + node.text + ' was checked</p>');
          },
          onNodeUnchecked: function (event, node) {
            console.log(node.element_id + ' was unchecked');
            if (node.type == "device") {
              var index = selectedDevices.indexOf(node.element_id);
              if (index > -1) {
                selectedDevices.splice(index, 1);
              }
            }
            //$('#checkable-output').prepend('<p>' + node.text + ' was unchecked</p>');
          }
        });

   $('#treeview-checkable').treeview('collapseAll', { silent: true });

//$('#treeview-checkable').treeview('selectNode', [ 655, { silent: false } ]);


   /*
   $.each( data, function( key, val ) {
      console.log(val.name);
      //console.log(val.childs[0]);
      if (val.childs!=undefined) {
        console.log(val.childs[0]);

      }
    });
    */
 });

/*
  var fileJson2 = "/api/selectdevices/<%=user%>";
  $.getJSON( fileJson, function( data ) {
 $.each( data, function( key, val ) {
  });
*/




}

function selectMonitor() {
  //alert("aa");
  //$('#treeview-checkable').treeview('checkNode', 655);
  $('#treeview-checkable').treeview('checkNode', [ 655, { silent: true } ]);
}

function loadLayer() {
  // posicion actual
  /*
  navigator.geolocation.getCurrentPosition(function(location) {
    //console.log(location.coords.latitude);
    //console.log(location.coords.longitude);
    //console.log(location.coords.accuracy);
    addActualPosition(location.coords.latitude,location.coords.longitude,location.coords.accuracy);
  });*/

 var fileJson = "/api/tracking1/user/<%=user%>";

 $.getJSON( fileJson, function( data ) {
  
  var strDevices = '[';
 
   var ndata = data.length;
   var index = 0;
   $.each( data, function( key, val ) {
     processDevice (val.license,val.alias,val.longitude,val.latitude,val.speed,val.heading,val.vehicle_state, val.iconReal, val.iconCover, val.iconAlarm, val.pos_date, val.deviceId);

     monitorDevices[val.license] = val.deviceId;

    if (val.deviceId == deviceId) {
      centerMap(val.longitude,val.latitude);
      //$('#licenseHist').attr("placeholder", val.license);
      $('#licenseHist').val(val.license);
      //document.getElementById('attr-loading').style.display = 'none';
    }
    index ++;
    if (index == ndata) {
      strDevices = strDevices + '{"id": ' + val.deviceId + ', "name": "' + val.license + '"}' ;
      document.getElementById('attr-loading').style.display = 'none';
    } else {
      strDevices = strDevices + '{"id": ' + val.deviceId + ', "name": "' + val.license + '"},' ;
    }
  });               

    strDevices = strDevices + ']';
    var jsonDevices = JSON.parse(strDevices);

      var $input = $('#licenseHist');
      $input.typeahead({source:jsonDevices, 
                autoSelect: true,
              /*updater: function(selection){
                //console.log("You selected: " + selection.id);
              }*/
            }); 

     });



//$('#licenseHist').value = "aa";

    //$('#licenseHist').typeahead('val','FLAA-RUNKEEPER').blur();

    //$input.typeahead('val', 'some value').blur()

  //document.getElementById('attr-loading').style.display = 'none';

}


function reloadLayer() {
  //if (!isMobile()) {  
    var fileJson = "./json/users/realTime/<%=user%>.json?";

     $.getJSON( fileJson, function( data ) {

       var items = [];
       $.each( data, function( key, val ) {
        processDevice (val.license,val.alias,val.longitude,val.latitude,val.speed,val.heading,val.vehicle_state, val.iconReal, val.iconCover, val.iconAlarm, val.pos_date, val.deviceId);
      });               
     });
  //}
}

function processDevice(ident,alias,lon,lat,speed,heading,vehicleState, iconReal, iconCover, iconAlarm, posDate, deviceId) {             
   //TODO: lo quito para que siempre salgan los coches ordenados ?
   //if (dict[ident][0] != lon  || dict[ident][1] != lat) 
  iconDict[deviceId] = iconReal;
  vehicleLicenseDict[deviceId] = ident;
  dateDict[deviceId] = posDate;
  aliasDict[deviceId] = alias;
  latitudeDict[deviceId] = lat;
  longitudeDict[deviceId] = lon;
  speedDict[deviceId] = speed;
  headingDict[deviceId] = heading;

   if ( (dict_date[ident]==null) || (dict_date[ident]<posDate) )
   {
    dict_date[ident]=posDate;

    // Eliminar el icono de todas las capas
    iFeature = vectorTrackingSource.getFeatureById(ident);
    if (iFeature!=null) {
     vectorTrackingSource.removeFeature(iFeature);
   }

   // añadir el icono
   add (ident,alias,lon,lat,speed,heading,vehicleState, iconReal, iconCover, iconAlarm, deviceId, posDate);

 }
}

function processDeviceTree(ident,alias,lon,lat,speed,heading,vehicleState, iconReal, iconCover, iconAlarm, posDate, deviceId) {             
   //TODO: lo quito para que siempre salgan los coches ordenados ?
   //if (dict[ident][0] != lon  || dict[ident][1] != lat) 
  iconDict[deviceId] = iconReal;
  vehicleLicenseDict[deviceId] = ident;
  dateDict[deviceId] = posDate;
  aliasDict[deviceId] = alias;
  latitudeDict[deviceId] = lat;
  longitudeDict[deviceId] = lon;
  speedDict[deviceId] = speed;
  headingDict[deviceId] = heading;


    // Eliminar el icono de todas las capas
    iFeature = vectorTrackingSource.getFeatureById(ident);
    if (iFeature!=null) {
     vectorTrackingSource.removeFeature(iFeature);
   }

   // añadir el icono
   add (ident,alias,lon,lat,speed,heading,vehicleState, iconReal, iconCover, iconAlarm, deviceId, posDate);

}


    function add(ident, alias, lon, lat, speed, heading, vehicleState, iconReal, iconCover, iconAlarm, deviceId, posDate) {
      var geo_point = new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'));

      var iconFeature = new ol.Feature({
        geometry: geo_point,
        id: deviceId,
        elementId: 'device',
        name: alias
      });

      var image_src = getDeviceImage(vehicleState, posDate, iconReal, iconCover, iconAlarm); 
      
      var iconStyle;
      var iconScale = 1;

      //iconScale = 0.8;
      iconStyle = [new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         rotation: heading,
         src: image_src
       }))
      })

      ];

      iconFeature.setStyle(iconStyle);
      iconFeature.setId(ident);

      vectorTrackingSource.addFeature(iconFeature); 

      var deviceVectorSource = new ol.source.Vector({
        features: []
      });
      deviceVectorSource.addFeature(iconFeature); 
      var deviceVectorLayer = new ol.layer.Vector({
        title: alias,
        visible: false,
        source: deviceVectorSource
      });
      //map.addLayer(deviceVectorLayer);
      if (!isMobile()) {
        kyrosDevicesGroup.getLayers().push(deviceVectorLayer);
      }
    }

  
  function addLinesTracking5(trackingId1, lat1, lon1, trackingId2, lat2, lon2, trackingId3, lat3, lon3, trackingId4, lat4, lon4, trackingId5, lat5, lon5) {

    vectorTrackingHistSource.clear();
    vectorLinesHistSource.clear();

    vectorLinesSource.clear();

    //var coords = [[lon1, lat1],[lon2, lat2],[lon3, lat3],[lon4, lat4],[lon5, lat5] ]; 
    
    var coords = [];
    if (lat1!=0) {
      coords.push([lon1, lat1]);

      var iconFeature1 = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.transform([lon1, lat1], 'EPSG:4326', 'EPSG:3857')),
        id: trackingId1,
        elementId: 'trackingPoint',
        name: "<%= __('tracking_point') %>"

      });
      iconFeature1.setStyle(new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         src: './img/points/beacon_ball_blue.gif'
       }))
      }));
      vectorLinesSource.addFeature(iconFeature1); 
    }
    if (lat2!=0) {
      coords.push([lon2, lat2]);

      var iconFeature2 = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.transform([lon2, lat2], 'EPSG:4326', 'EPSG:3857')),
        id: trackingId2,
        elementId: 'trackingPoint',
        name: "<%= __('tracking_point') %>"
      });
      iconFeature2.setStyle(new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         src: './img/points/beacon_ball_blue.gif'
       }))
      }));
      vectorLinesSource.addFeature(iconFeature2); 
    }
    if (lat3!=0) {
      coords.push([lon3, lat3]);

      var iconFeature3 = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.transform([lon3, lat3], 'EPSG:4326', 'EPSG:3857')),
        id: trackingId3,
        elementId: 'trackingPoint',
        name: "<%= __('tracking_point') %>"
      });
      iconFeature3.setStyle(new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         src: './img/points/beacon_ball_blue.gif'
       }))
      }));
      vectorLinesSource.addFeature(iconFeature3);       
    }
    if (lat4!=0) {
      coords.push([lon4, lat4]);

      var iconFeature4 = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.transform([lon4, lat4], 'EPSG:4326', 'EPSG:3857')),
        id: trackingId4,
        elementId: 'trackingPoint',
        name: "<%= __('tracking_point') %>"
      });
      iconFeature4.setStyle(new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         src: './img/points/beacon_ball_blue.gif'
       }))
      }));
      vectorLinesSource.addFeature(iconFeature4);       
    }
    if (lat5!=0) {
      coords.push([lon5, lat5]);

      var iconFeature5 = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.transform([lon5, lat5], 'EPSG:4326', 'EPSG:3857')),
        id: trackingId5,
        elementId: 'trackingPoint',
        name: "<%= __('tracking_point') %>"
      });
      iconFeature5.setStyle(new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
         scale: 0.8,
         src: './img/points/beacon_ball_blue.gif'
       }))
      }));
      vectorLinesSource.addFeature(iconFeature5); 

    }

    var lineString = new ol.geom.LineString(coords);
    // transform to EPSG:3857
    lineString.transform('EPSG:4326', 'EPSG:3857');

    var lineStyle = new ol.style.Style({
    stroke: new ol.style.Stroke({
        //color: '#'+Math.floor(Math.random()*16777215).toString(16),
        //color: '#0000ff',
        color: '#66c2ff',        
        width: 4
    })
  });

  // create the feature
  var featureLine = new ol.Feature({
    geometry: lineString,
    style: lineStyle,
    name: "<%= __('tracking_line') %>"
  });
  vectorLinesSource.addFeature(featureLine);

    // centrar el mapa
    map.getView().fit(vectorLinesSource.getExtent(), map.getSize());
    if(map.getView().getZoom()>20){
      map.getView().setZoom(20);
    }
  }

 function centerMap(lon, lat) {
  map.setView (new ol.View({
    center: ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'),
    zoom: 14,
    maxZoom:22
  }));
 }

 var fileJsonMonth = "./json/users/lastMonth/crueda.json?";
 var fileJsonWeek = "./json/users/lastWeek/crueda.json?";
 var fileJsonDay = "./json/users/lastDay/crueda.json?";
 if (username != null) {
  fileJsonMonth = "./json/users/lastMonth/" + username + ".json?";
  fileJsonWeek = "./json/users/lastWeek/" + username + ".json?";
  fileJsonDay = "./json/users/lastDay/" + username + ".json?";
}

var sourceHeatmapMonth = new ol.source.Vector({
  url: fileJsonMonth,
  format: new ol.format.GeoJSON(),
  projection: 'EPSG:3857'
});
var sourceHeatmapWeek = new ol.source.Vector({
  url: fileJsonWeek,
  format: new ol.format.GeoJSON(),
  projection: 'EPSG:3857'
});
var sourceHeatmapDay = new ol.source.Vector({
  url: fileJsonDay,
  format: new ol.format.GeoJSON(),
  projection: 'EPSG:3857'
});

var heatmapMonth = new ol.layer.Heatmap({
    title: 'Heatmap last month',
    visible: false,
    source: sourceHeatmapMonth,
    opacity: .9
 });
var heatmapWeek = new ol.layer.Heatmap({
    title: 'Heatmap last week',
    visible: false,
    source: sourceHeatmapWeek,
    opacity: .9
 });
var heatmapDay = new ol.layer.Heatmap({
    title: 'Heatmap last day',
    visible: false,
    source: sourceHeatmapDay,
    opacity: .9
 });


var sourceClusterMonth = new ol.source.Vector({
  url: './json/users/lastMonth/crueda.json',
  format: new ol.format.GeoJSON(),
  projection: 'EPSG:3857'
});
var clusterSourceMonth = new ol.source.Cluster({
  distance: 40,
  source: sourceClusterMonth
});
var styleCache = {};
var clustersMonth = new ol.layer.Vector({
  title: 'Cluster last month',
  visible: false,
  source: clusterSourceMonth,
  style: function(feature, resolution) {
    var size = feature.get('features').length;
    var style = styleCache[size];
    if (!style) {
      style = [new ol.style.Style({
        image: new ol.style.Circle({
          radius: 20,
          stroke: new ol.style.Stroke({
            color: '#fff'
          }),
          fill: new ol.style.Fill({
            //color: '#3399CC'
            color: '#6411ED'
          })
        }),
        text: new ol.style.Text({
          text: size.toString(),
          fill: new ol.style.Fill({
            color: '#fff'
          })
        })
      })];
      styleCache[size] = style;
    }
    return style;
  }
});

var sourceClusterWeek = new ol.source.Vector({
  url: './json/users/lastWeek/crueda.json',
  format: new ol.format.GeoJSON(),
  projection: 'EPSG:3857'
});
var clusterSourceWeek = new ol.source.Cluster({
  distance: 40,
  source: sourceClusterWeek
});
var styleCache = {};
var clustersWeek = new ol.layer.Vector({
  title: 'Cluster last week',
  visible: false,
  source: clusterSourceWeek,
  style: function(feature, resolution) {
    var size = feature.get('features').length;
    var style = styleCache[size];
    if (!style) {
      style = [new ol.style.Style({
        image: new ol.style.Circle({
          radius: 20,
          stroke: new ol.style.Stroke({
            color: '#fff'
          }),
          fill: new ol.style.Fill({
            //color: '#3399CC'
            color: '#11ED72'
          })
        }),
        text: new ol.style.Text({
          text: size.toString(),
          fill: new ol.style.Fill({
            color: '#fff'
          })
        })
      })];
      styleCache[size] = style;
    }
    return style;
  }
});

var sourceClusterDay = new ol.source.Vector({
  url: './json/users/lastDay/crueda.json',
  format: new ol.format.GeoJSON(),
  projection: 'EPSG:3857'
});
var clusterSourceDay = new ol.source.Cluster({
  distance: 40,
  source: sourceClusterDay
});
var styleCache = {};
var clustersDay = new ol.layer.Vector({
  title: 'Cluster last day',
  visible: false,
  source: clusterSourceDay,
  style: function(feature, resolution) {
    var size = feature.get('features').length;
    var style = styleCache[size];
    if (!style) {
      style = [new ol.style.Style({
        image: new ol.style.Circle({
          radius: 20,
          stroke: new ol.style.Stroke({
            color: '#fff'
          }),
          fill: new ol.style.Fill({
            //color: '#3399CC'
            color: '#ED1111'
          })
        }),
        text: new ol.style.Text({
          text: size.toString(),
          fill: new ol.style.Fill({
            color: '#fff'
          })
        })
      })];
      styleCache[size] = style;
    }
    return style;
  }
});

var toner = new ol.layer.Tile({
 title: 'Toner',
 type: 'base',
 visible: false,
 source: new ol.source.Stamen({
   layer: 'toner'
 })
});

var roads = new ol.layer.Tile({
 title: 'Roads',
 type: 'base',
 visible: true,
 source: new ol.source.XYZ({
   url: 'http://1.maptile.lbs.ovi.com/maptiler/v2/maptile/newest/normal.day/{z}/{x}/{y}/256/png8?lg=es&app_id=XauXjbuily9soJuafQ8d&token=qg4GasqCW0lTKZbyeID3_A'
 })
});





var osm = new ol.layer.Tile({
 title: 'OpenStreetMap',
 type: 'base',
 visible: false,
 source: new ol.source.OSM()
});
 
var kyrosDevicesGroup = new ol.layer.Group({
    'title': 'Kyros devices',
    //layers: [vectorLayer]
    layers: []
  });

var kyrosGroup = new ol.layer.Group({
    'title': 'Tracking',
    layers: [vectorKyrosLinesHistLayer,vectorKyrosTrackingHistLayer, vectorTrackingMapPointLayer, vectorKyrosLinesLayer, vectorKyrosTrackingLayer, vectorKyrosPoiLayer]
  });

var map = new ol.Map({
  layers: [
  new ol.layer.Group({
   'title': 'Base maps',
   layers: [toner, roads, osm]
 }),

kyrosDevicesGroup,
kyrosGroup,

  new ol.layer.Group({
   'title': 'Heatmaps',
   layers: [heatmapMonth, heatmapWeek, heatmapDay]
 }),
  new ol.layer.Group({
   'title': 'Clustering',
   layers: [clustersMonth, clustersWeek, clustersDay]
 }),


  ],
  target: 'map',
  view: new ol.View({
    center: ol.proj.transform([-3.75, 40.24], 'EPSG:4326', 'EPSG:3857'),
    zoom: 7,
    maxZoom:22
  })
});

if (!isMobile()) {
var layerSwitcher = new ol.control.LayerSwitcher({
    tipLabel: 'Capas' // Optional label for button
  });
  map.addControl(layerSwitcher);
}

if (!isMobile()) {
map.addControl(new ol.control.FullScreen());
}

if (!isMobile()) {
map.addControl(new ol.control.ZoomSlider({
  maxResolution: 0.5972,
  minResolution: 39135.76
}));  
}

/*
if (!isMobile()) {
  map.addControl(new ol.control.OverviewMap({
    collapsed: true
  }));
}*/

var scaleLineControl = new ol.control.ScaleLine();

map.addControl(scaleLineControl);

map.addControl(new ol.control.MousePosition({
  undefinedHTML: '',
  projection: 'EPSG:4326',
  coordinateFormat: function(coordinate) {
    return ol.coordinate.format(coordinate, '{x}, {y}', 4);
  }
}));

//*****************


// Vector layer
  /*var source = new ol.source.Vector();
  var vector = new ol.layer.Vector(
  { source: source,
    style: style
  });
  map.addLayer(vector);*/

// Add a feature on the map
  function addFeatureAt(trackingId, p) { 
    var f, r = map.getView().getResolution() *10;
 
        
      var geo_point = new ol.geom.Point(ol.proj.transform([p[0], p[1]], 'EPSG:4326', 'EPSG:3857'));
      var f = new ol.Feature({
        geometry: geo_point,
        id: trackingId,
        elementId: 'trackingPoint',
        name: "<%= __('tracking_point') %>"      
      });

 
    vectorTrackingHistSource.addFeature(f);
    vectorKyrosTrackingHistLayer.animateFeature (f, 
      [ new ol.featureAnimation["Drop"](
        { speed: Number(0.8), 
          duration: Number(760),
          side: false
        }),
        new ol.featureAnimation[
        "Bounce"](
        { speed: Number(0.8), 
          duration: Number(760),
          horizontal: /Slide/.test("Drop")
        })
      ]);
  }

function addFeaturePointAt(p) { 
    var f, r = map.getView().getResolution() *10;
 
        
      var geo_point = new ol.geom.Point(ol.proj.transform([p[0], p[1]], 'EPSG:4326', 'EPSG:3857'));
      var f = new ol.Feature({
        geometry: geo_point,
        id: 0,
        elementId: 'positionPoint',
        lon: p[0],
        lat: p[1],
        name: "<%= __('position_map') %>"  
      });

    vectorTrackingMapPointSource.clear();
    vectorTrackingMapPointSource.addFeature(f);

    vectorTrackingMapPointLayer.animateFeature (f, 
      [ new ol.featureAnimation["Drop"](
        { speed: Number(1.4), 
          duration: Number(260),
          side: false
        }),
        new ol.featureAnimation[
        "Bounce"](
        { speed: Number(0.8), 
          duration: Number(760),
          horizontal: /Slide/.test("Shake")
        })
      ]);
  }

  // Drop a feature on click 
  /*
  map.on('singleclick', function(evt) 
  { 
    var feature = map.forEachFeatureAtPixel(evt.coordinate, function(feature, layer) {
      return feature;
    });
    if (feature==undefined) {
     var lonlat = ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');
      var lon = lonlat[0];
      var lat = lonlat[1];
        addFeaturePointAt (lonlat);

    }
  });
*/





 
//***

var info = $('#info');
info.tooltip({
 animation: false,
 trigger: 'manual'
});

var displayFeatureInfo = function(pixel) {
 info.css({
   left: pixel[0] + 'px',
   top: (pixel[1] - 15) + 'px'
 });
 var feature = map.forEachFeatureAtPixel(pixel, function(feature, layer) {
   return feature;
 });
 if (feature) {
    //if (isMobile()) {
             //openTooltip(feature.get('id'));
    //} else {
             info.tooltip('hide')
             .attr('data-original-title', feature.get('name'))
             .tooltip('fixTitle')
             .tooltip('show');

             //openTooltip(feature.get('id')); 
             //moveMap(feature.get('id'));     
    //}
             
           } else {
             info.tooltip('hide');
             //closeTooltip();
           }
         };

var displayTooltipInfo = function(evt) {
 info.css({
   left: evt.pixel[0] + 'px',
   top: (evt.pixel[1] - 15) + 'px'
 });
 var feature = map.forEachFeatureAtPixel(evt.pixel, function(feature, layer) {
   return feature;
 });
 if (feature) {
    if (feature.get('elementId')=='trackingPoint') {
      openTooltipTrackingPoint(feature.get('id'));
    }
    else if (feature.get('elementId')=='device') {
            //if (isMobile()) {
             openTooltip(feature.get('id'));
             showTracking5(feature.get('id'));
            //} else {
             info.tooltip('hide');
            }
    else if (feature.get('elementId')=='positionPoint') {
            openTooltipMapPoint(feature.get('lat'), feature.get('lon'));
          }

          }

          else {
        var lonlat = ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');
      var lon = lonlat[0];
      var lat = lonlat[1];
        addFeaturePointAt (lonlat);
 
          }
         };

         map.on('pointermove', function(evt) {
           if (evt.dragging) {
             info.tooltip('hide');
             return;
           }
           displayFeatureInfo(map.getEventPixel(evt.originalEvent));
         });
         
         map.on('click', function(evt) {
           displayTooltipInfo(evt);
           //if (!isMobile()) {
           //   closeTooltip();
            //}

         });
         
       </script>
     </body>
     </html>